resource "openstack_compute_secgroup_v2" "metabase_sg_db" {
  name        = "metabase_sg_db"
  description = "metabase_sg_db"

  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_bastion.id
    from_port     = -1
    to_port       = -1
    ip_protocol   = "icmp"
  }
  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_bastion.id
    from_port     = 22
    to_port       = 22
    ip_protocol   = "tcp"
  }
  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_app.id
    from_port     = 3306
    to_port       = 3306
    ip_protocol   = "tcp"
  }
}resource "openstack_networking_router_v2" "metabase_router" {
  name                = "metabase-router"
  admin_state_up      = true
  external_network_id = data.openstack_networking_network_v2.ext_net.id
}

resource "openstack_networking_network_v2" "metabase_net" {
  name           = "metabase-net"
  admin_state_up = "true"
  shared         = "false"
}

resource "openstack_networking_subnet_v2" "metabase_subnet" {
  name            = "metabase-subnet"
  network_id      = openstack_networking_network_v2.metabase_net.id
  cidr            = "172.19.0.0/24"
  ip_version      = 4
  enable_dhcp     = "true"
  dns_nameservers = ["8.8.8.8", "1.1.1.1"]
}

resource "openstack_networking_router_interface_v2" "metabase_router_iface_internal" {
  router_id = openstack_networking_router_v2.metabase_router.id
  subnet_id = openstack_networking_subnet_v2.metabase_subnet.id
}
data "openstack_networking_network_v2" "ext_net" {
  name = "ext_net"
}

data "openstack_compute_flavor_v2" "small" {
  vcpus = 1
  ram   = 2048
}

data "openstack_images_image_v2" "ubuntu_2204" {
  name        = "ubuntu_2204"
  most_recent = true
}

data "openstack_images_image_v2" "srv-mysql-ubuntu1804" {
  name        = "srv-mysql-ubuntu1804"
  most_recent = true
}

data "openstack_images_image_v2" "srv-nginx-ubuntu1804" {
  name        = "srv-nginx-ubuntu1804"
  most_recent = true
}


data "openstack_images_image_v2" "srv-docker-ubuntu2204" {
  name        = "srv-docker-ubuntu2204"
  most_recent = true
}
resource "openstack_compute_instance_v2" "metabase_load_balancer" {
  name              = "metabase-load-balancer"
  image_id          = data.openstack_images_image_v2.srv-nginx-ubuntu1804.id
  flavor_id         = data.openstack_compute_flavor_v2.small.id
  key_pair          = var.key_name
  security_groups   = [openstack_compute_secgroup_v2.metabase_sg_load_balancer.name]
  availability_zone = "nodos-amd-2022"

  user_data = templatefile("${path.module}/load_balancer_init.sh", {
    app_ip = openstack_compute_instance_v2.metabase_app.network.0.fixed_ip_v4
  })

  network {
    name = openstack_networking_network_v2.metabase_net.name
  }

  depends_on = [
    openstack_networking_subnet_v2.metabase_subnet,
  ]
}

resource "openstack_compute_floatingip_associate_v2" "metabase_load_balancer_fip" {
  floating_ip = openstack_networking_floatingip_v2.metabase_load_balancer_fip.address
  instance_id = openstack_compute_instance_v2.metabase_load_balancer.id
}
resource "openstack_networking_floatingip_v2" "metabase_bastion_fip" {
  description = "metabase-bastion-ip"
  pool        = "ext_net"
}

resource "openstack_networking_floatingip_v2" "metabase_load_balancer_fip" {
  description = "metabase-load-balancer-ip"
  pool        = "ext_net"
}
resource "openstack_compute_secgroup_v2" "metabase_sg_app" {
  name        = "metabase_sg_app"
  description = "metabase_sg_app"

  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_bastion.id
    from_port     = -1
    to_port       = -1
    ip_protocol   = "icmp"
  }
  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_bastion.id
    from_port     = 22
    to_port       = 22
    ip_protocol   = "tcp"
  }
  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_load_balancer.id
    from_port     = 80
    to_port       = 80
    ip_protocol   = "tcp"
  }
}resource "openstack_compute_secgroup_v2" "metabase_sg_load_balancer" {
  name        = "metabase_sg_load_balancer"
  description = "metabase_sg_load_balancer"

  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_bastion.id
    from_port     = -1
    to_port       = -1
    ip_protocol   = "icmp"
  }
  rule {
    from_group_id = openstack_compute_secgroup_v2.metabase_sg_bastion.id
    from_port     = 22
    to_port       = 22
    ip_protocol   = "tcp"
  }
  rule {
    from_port   = 80
    to_port     = 80
    ip_protocol = "tcp"
    cidr        = "0.0.0.0/0"
  }
}variable "google_db_password" {
  description = "Password for the Google DB"
  type        = string
  sensitive   = true
}

resource "openstack_compute_instance_v2" "metabase_db" {
  name              = "metabase-db"
  image_id          = data.openstack_images_image_v2.srv-mysql-ubuntu1804.id
  flavor_id         = data.openstack_compute_flavor_v2.small.id
  key_pair          = var.key_name
  security_groups   = [openstack_compute_secgroup_v2.metabase_sg_db.name]
  availability_zone = "nodos-amd-2022"

  user_data = templatefile("${path.module}/db_init.sh", {
    google_mobility_sql = file("${path.module}/google-mobility.sql"),
    GOOGLE_DB_PASSWORD  = var.google_db_password,
  })

  network {
    name = openstack_networking_network_v2.metabase_net.name
  }
  depends_on = [
    openstack_networking_subnet_v2.metabase_subnet,
  ]
}
resource "openstack_compute_secgroup_v2" "metabase_sg_bastion" {
  name        = "metabase_sg_bastion"
  description = "metabase_sg_bastion"

  rule {
    from_port   = 22
    to_port     = 22
    ip_protocol = "tcp"
    cidr        = "0.0.0.0/0"
  }
  rule {
    ip_protocol = "icmp"
    from_port   = -1
    to_port     = -1
    cidr        = "0.0.0.0/0"
  }
}variable "key_name" {
  type    = string
  default = "mac"
}
resource "openstack_compute_instance_v2" "metabase_app" {
  name              = "metabase-app"
  image_id          = data.openstack_images_image_v2.srv-docker-ubuntu2204.id
  flavor_id         = data.openstack_compute_flavor_v2.small.id
  key_pair          = var.key_name
  security_groups   = [openstack_compute_secgroup_v2.metabase_sg_app.name]
  availability_zone = "nodos-amd-2022"

  network {
    name = openstack_networking_network_v2.metabase_net.name
  }

  user_data = <<-EOF
    #!/bin/bash
    echo "Starting metabase_init.sh" >> /var/log/metabase_init.log
    docker run -d -p 3000:3000 --name metabase metabase/metabase >> /var/log/metabase_init.log 2>&1
    if [ $? -eq 0 ]; then
      echo "Metabase started successfully" >> /var/log/metabase_init.log
    else
      echo "Failed to start Metabase" >> /var/log/metabase_init.log
    fi
  EOF

  depends_on = [
    openstack_networking_subnet_v2.metabase_subnet,
  ]
}
resource "openstack_compute_instance_v2" "metabase_bastion" {
  name              = "metabase-bastion"
  image_id          = data.openstack_images_image_v2.ubuntu_2204.id
  flavor_id         = data.openstack_compute_flavor_v2.small.id
  key_pair          = var.key_name
  security_groups   = [openstack_compute_secgroup_v2.metabase_sg_bastion.name]
  availability_zone = "nodos-amd-2022"

  network {
    name = openstack_networking_network_v2.metabase_net.name
  }

  depends_on = [
    openstack_networking_subnet_v2.metabase_subnet,
  ]
}

resource "openstack_compute_floatingip_associate_v2" "metabase_bastion_fip" {
  floating_ip = openstack_networking_floatingip_v2.metabase_bastion_fip.address
  instance_id = openstack_compute_instance_v2.metabase_bastion.id
}

#!/bin/bash

# Reading environment variables from .env file (ensure .env file exists in the correct location)
while IFS= read -r line; do export $line; done < ./.env

# Update MySQL bind address to allow remote connections
sudo sed -i '/bind-address/s/127.0.0.1/0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf
sudo systemctl restart mysql

# Create the database and grant privileges
sudo mysql << EOF
CREATE DATABASE IF NOT EXISTS google;
GRANT ALL PRIVILEGES ON google.* TO 'googleuser'@'%' IDENTIFIED BY '${GOOGLE_DB_PASSWORD}';
FLUSH PRIVILEGES;
EOF

# Import the SQL file into the newly created database
sudo sh -c 'mysql google < ./google-mobility.sql'
#!/bin/bash

sudo rm -f /etc/nginx/sites-enabled/default

sudo tee /etc/nginx/conf.d/lb.conf << EOF
server {
  listen 80;
  location / {
    proxy_pass http://${app_ip}; # my backend WP
  }
}
EOF
sudo service nginx restart
export $(grep -v '^#' .env | xargs)
#!/bin/bash
docker run -d -p 3000:3000 --name metabase metabase/metabase