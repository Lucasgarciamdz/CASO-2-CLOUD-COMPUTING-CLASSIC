# {{- /* Service for MySQL */ -}}
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: metabase
spec:
  selector:
    app: mysql
  ports:
  - port: 3306

---

# # {{- /* Service for Metabase */ -}}
apiVersion: v1
kind: Service
metadata:
  name: metabase
  namespace: metabase
spec:
  selector:
    app: metabase
  ports:
  - port: 80
    targetPort: 3000

---

# {{- /* Secret for Metabase */ -}}
apiVersion: v1
kind: Secret
metadata:
  name: metabase-secrets
  namespace: metabase
type: Opaque
data:
  MB_DB_USER:
  MB_DB_PASS:
  MYSQL_ROOT_PASSWORD:
  MYSQL_USER:

---

# {{- /* Ingress for Metabase */ -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: metabase-ingress
  namespace: metabase
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: lucasg-metabase.my.kube.um.edu.ar
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: metabase
            port:
              number: 80

---

# {{- /* Deployment for Metabase */ -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metabase
  namespace: metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metabase
  template:
    metadata:
      labels:
        app: metabase
    spec:
      initContainers:
      - name: wait-for-mysql
        image: busybox
        command: ['sh', '-c', 'until nc -z mysql 3306; do echo waiting for mysql; sleep 2; done;']
      containers:
      - name: metabase
        image: metabase/metabase
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 90
          periodSeconds: 10
        env:
        - name: MB_DB_TYPE
          value: mysql
        - name: MB_DB_DBNAME
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MB_DB_DBNAME
        - name: MB_DB_USER
          valueFrom:
            secretKeyRef:
              name: metabase-config
              key: MB_DB_USER
        - name: MB_DB_PASS
          valueFrom:
            secretKeyRef:
              name: metabase-secrets
              key: MB_DB_PASS
        - name: MB_DB_HOST
          value: mysql
        ports:
        - containerPort: 3000

---

# {{- /* Deployment for MySQL */ -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.4
        env:
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MYSQL_DATABASE
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: metabase-secrets
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: metabase-config
              key: MYSQL_USER
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        readinessProbe:
          exec:
            command: ["mysqladmin", "ping", "-h", "localhost"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim


---

# {{- /* Namespace for Metabase */ -}}
apiVersion: v1
kind: Namespace
metadata:
  name: metabase

---

# {{- /* NetworkPolicy for Ingress */ -}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-policy
  namespace: metabase
spec:
  podSelector:
    matchLabels:
      app: ingress-nginx
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: metabase
    ports:
    - protocol: TCP
      port: 3000

---

# {{- /* NetworkPolicy for Metabase */ -}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: metabase-app-policy
  namespace: metabase
spec:
  podSelector:
    matchLabels:
      app: metabase
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306

---

# {{- /* NetworkPolicy for MySQL */ -}}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mysql-policy
  namespace: metabase
spec:
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: metabase
    ports:
    - protocol: TCP
      port: 3306

---

# {{- /* ConfigMap for Metabase */ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: metabase-config
  namespace: metabase
data:
  MB_DB_DBNAME: "metabaseDB"
  MB_DB_HOST: "metabase.mysql"
  MYSQL_DATABASE: "metabaseDB"

---

# {{- /* ConfigMap for DB Init Script */ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-script
  namespace: metabase
data:
  init-db.sh: |
    #!/bin/bash
    set -e
    
    mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD <<EOF
    CREATE DATABASE IF NOT EXISTS mobility;
    EOF

---

# {{- /* Persistent Volume Claim */ -}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: metabase
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 10Gi

---

# {{- /* Persistent Volume */ -}}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  namespace: metabase
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: "/mnt/data"
